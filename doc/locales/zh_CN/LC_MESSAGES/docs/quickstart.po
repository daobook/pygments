# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2006-2021, Georg Brandl and Pygments contributors
# This file is distributed under the same license as the Pygments package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Pygments 2.10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-10 09:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../docs/quickstart.rst:5
msgid "Introduction and Quickstart"
msgstr ""

#: ../../docs/quickstart.rst:8
msgid ""
"Welcome to Pygments! This document explains the basic concepts and terms "
"and gives a few examples of how to use the library."
msgstr ""

#: ../../docs/quickstart.rst:13
msgid "Architecture"
msgstr ""

#: ../../docs/quickstart.rst:15
msgid ""
"There are four types of components that work together highlighting a "
"piece of code:"
msgstr ""

#: ../../docs/quickstart.rst:18
msgid ""
"A **lexer** splits the source into tokens, fragments of the source that "
"have a token type that determines what the text represents semantically "
"(e.g., keyword, string, or comment). There is a lexer for every language "
"or markup format that Pygments supports."
msgstr ""

#: ../../docs/quickstart.rst:22
msgid ""
"The token stream can be piped through **filters**, which usually modify "
"the token types or text fragments, e.g. uppercasing all keywords."
msgstr ""

#: ../../docs/quickstart.rst:24
msgid ""
"A **formatter** then takes the token stream and writes it to an output "
"file, in a format such as HTML, LaTeX or RTF."
msgstr ""

#: ../../docs/quickstart.rst:26
msgid ""
"While writing the output, a **style** determines how to highlight all the"
" different token types. It maps them to attributes like \"red and bold\"."
msgstr ""

#: ../../docs/quickstart.rst:31
msgid "Example"
msgstr ""

#: ../../docs/quickstart.rst:33
msgid "Here is a small example for highlighting Python code:"
msgstr ""

#: ../../docs/quickstart.rst:44
msgid "which prints something like this:"
msgstr ""

#: ../../docs/quickstart.rst:52
msgid ""
"As you can see, Pygments uses CSS classes (by default, but you can change"
" that) instead of inline styles in order to avoid outputting redundant "
"style information over and over. A CSS stylesheet that contains all CSS "
"classes possibly used in the output can be produced by:"
msgstr ""

#: ../../docs/quickstart.rst:61
msgid ""
"The argument to :func:`get_style_defs` is used as an additional CSS "
"selector: the output may look like this:"
msgstr ""

#: ../../docs/quickstart.rst:72
msgid "Options"
msgstr ""

#: ../../docs/quickstart.rst:74
msgid ""
"The :func:`highlight()` function supports a fourth argument called "
"*outfile*, it must be a file object if given. The formatted output will "
"then be written to this file instead of being returned as a string."
msgstr ""

#: ../../docs/quickstart.rst:78
msgid ""
"Lexers and formatters both support options. They are given to them as "
"keyword arguments either to the class or to the lookup method:"
msgstr ""

#: ../../docs/quickstart.rst:91
msgid ""
"This makes the lexer strip all leading and trailing whitespace from the "
"input (`stripall` option), lets the formatter output line numbers "
"(`linenos` option), and sets the wrapping ``<div>``'s class to ``source``"
" (instead of ``highlight``)."
msgstr ""

#: ../../docs/quickstart.rst:96
msgid "Important options include:"
msgstr ""

#: ../../docs/quickstart.rst:99
msgid "`encoding`"
msgstr ""

msgid "for lexers and formatters"
msgstr ""

#: ../../docs/quickstart.rst:99
msgid ""
"Since Pygments uses Unicode strings internally, this determines which "
"encoding will be used to convert to or from byte strings."
msgstr ""

#: ../../docs/quickstart.rst:103
msgid "`style`"
msgstr ""

msgid "for formatters"
msgstr ""

#: ../../docs/quickstart.rst:102
msgid "The name of the style to use when writing the output."
msgstr ""

#: ../../docs/quickstart.rst:105
msgid ""
"For an overview of builtin lexers and formatters and their options, visit"
" the :doc:`lexer <lexers>` and :doc:`formatters <formatters>` lists."
msgstr ""

#: ../../docs/quickstart.rst:108
msgid "For a documentation on filters, see :doc:`this page <filters>`."
msgstr ""

#: ../../docs/quickstart.rst:112
msgid "Lexer and formatter lookup"
msgstr ""

#: ../../docs/quickstart.rst:114
msgid ""
"If you want to lookup a built-in lexer by its alias or a filename, you "
"can use one of the following methods:"
msgstr ""

#: ../../docs/quickstart.rst:131
msgid ""
"All these functions accept keyword arguments; they will be passed to the "
"lexer as options."
msgstr ""

#: ../../docs/quickstart.rst:134
msgid ""
"A similar API is available for formatters: use "
":func:`.get_formatter_by_name()` and "
":func:`.get_formatter_for_filename()` from the :mod:`pygments.formatters`"
" module for this purpose."
msgstr ""

#: ../../docs/quickstart.rst:140
msgid "Guessing lexers"
msgstr ""

#: ../../docs/quickstart.rst:142
msgid ""
"If you don't know the content of the file, or you want to highlight a "
"file whose extension is ambiguous, such as ``.html`` (which could contain"
" plain HTML or some template tags), use these functions:"
msgstr ""

#: ../../docs/quickstart.rst:156
msgid ""
":func:`.guess_lexer()` passes the given content to the lexer classes' "
":meth:`analyse_text()` method and returns the one for which it returns "
"the highest number."
msgstr ""

#: ../../docs/quickstart.rst:160
msgid ""
"All lexers have two different filename pattern lists: the primary and the"
" secondary one. The :func:`.get_lexer_for_filename()` function only uses "
"the primary list, whose entries are supposed to be unique among all "
"lexers. :func:`.guess_lexer_for_filename()`, however, will first loop "
"through all lexers and look at the primary and secondary filename "
"patterns if the filename matches. If only one lexer matches, it is "
"returned, else the guessing mechanism of :func:`.guess_lexer()` is used "
"with the matching lexers."
msgstr ""

#: ../../docs/quickstart.rst:168
msgid ""
"As usual, keyword arguments to these functions are given to the created "
"lexer as options."
msgstr ""

#: ../../docs/quickstart.rst:173
msgid "Command line usage"
msgstr ""

#: ../../docs/quickstart.rst:175
msgid ""
"You can use Pygments from the command line, using the "
":program:`pygmentize` script::"
msgstr ""

#: ../../docs/quickstart.rst:180
msgid ""
"will highlight the Python file test.py using ANSI escape sequences "
"(a.k.a. terminal colors) and print the result to standard output."
msgstr ""

#: ../../docs/quickstart.rst:183
msgid "To output HTML, use the ``-f`` option::"
msgstr ""

#: ../../docs/quickstart.rst:187
msgid ""
"to write an HTML-highlighted version of test.py to the file test.html. "
"Note that it will only be a snippet of HTML, if you want a full HTML "
"document, use the \"full\" option::"
msgstr ""

#: ../../docs/quickstart.rst:193
msgid "This will produce a full HTML document with included stylesheet."
msgstr ""

#: ../../docs/quickstart.rst:195
msgid "A style can be selected with ``-O style=<name>``."
msgstr ""

#: ../../docs/quickstart.rst:197
msgid ""
"If you need a stylesheet for an existing HTML file using Pygments CSS "
"classes, it can be created with::"
msgstr ""

#: ../../docs/quickstart.rst:202
msgid "where ``default`` is the style name."
msgstr ""

#: ../../docs/quickstart.rst:204
msgid ""
"More options and tricks can be found in the :doc:`command line reference "
"<cmdline>`."
msgstr ""

