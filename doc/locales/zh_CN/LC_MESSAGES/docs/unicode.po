# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2006-2021, Georg Brandl and Pygments contributors
# This file is distributed under the same license as the Pygments package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Pygments 2.10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-10 09:57+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../docs/unicode.rst:3
msgid "Unicode and Encodings"
msgstr ""

#: ../../docs/unicode.rst:5
msgid ""
"Since Pygments 0.6, all lexers use unicode strings internally. Because of"
" that you might encounter the occasional :exc:`UnicodeDecodeError` if you"
" pass strings with the wrong encoding."
msgstr ""

#: ../../docs/unicode.rst:9
msgid ""
"Per default all lexers have their input encoding set to `guess`.  This "
"means that the following encodings are tried:"
msgstr ""

#: ../../docs/unicode.rst:12
msgid "UTF-8 (including BOM handling)"
msgstr ""

#: ../../docs/unicode.rst:13
msgid "The locale encoding (i.e. the result of `locale.getpreferredencoding()`)"
msgstr ""

#: ../../docs/unicode.rst:14
msgid "As a last resort, `latin1`"
msgstr ""

#: ../../docs/unicode.rst:16
msgid ""
"If you pass a lexer a byte string object (not unicode), it tries to "
"decode the data using this encoding."
msgstr ""

#: ../../docs/unicode.rst:19
msgid ""
"You can override the encoding using the `encoding` or `inencoding` lexer "
"options.  If you have the `chardet`_ library installed and set the "
"encoding to ``chardet`` if will analyse the text and use the encoding it "
"thinks is the right one automatically:"
msgstr ""

#: ../../docs/unicode.rst:29
msgid ""
"The best way is to pass Pygments unicode objects. In that case you can't "
"get unexpected output."
msgstr ""

#: ../../docs/unicode.rst:32
msgid ""
"The formatters now send Unicode objects to the stream if you don't set "
"the output encoding. You can do so by passing the formatters an "
"`encoding` option:"
msgstr ""

#: ../../docs/unicode.rst:40
msgid ""
"**You will have to set this option if you have non-ASCII characters in "
"the source and the output stream does not accept Unicode written to it!**"
" This is the case for all regular files and for terminals."
msgstr ""

#: ../../docs/unicode.rst:44
msgid ""
"Note: The Terminal formatter tries to be smart: if its output stream has "
"an `encoding` attribute, and you haven't set the option, it will encode "
"any Unicode string with this encoding before writing it. This is the case"
" for `sys.stdout`, for example. The other formatters don't have that "
"behavior."
msgstr ""

#: ../../docs/unicode.rst:49
msgid ""
"Another note: If you call Pygments via the command line (`pygmentize`), "
"encoding is handled differently, see :doc:`the command line docs "
"<cmdline>`."
msgstr ""

#: ../../docs/unicode.rst:52
msgid ""
"The formatters now also accept an `outencoding` option which will "
"override the `encoding` option if given. This makes it possible to use a "
"single options dict with lexers and formatters, and still have different "
"input and output encodings."
msgstr ""

